<launch>
    <!-- Declare launch arguments -->
    <arg name="name" default="fake_diff_drive_test_system" description="robot name" />
    <arg name="prefix" default="" description="Prefix." />
    <arg name="description_package" default="diff_canopen_system" description="Package where urdf file is stored." />
    <arg name="description_file" default="fake_diff_drive_system" description="Name of the urdf file." />
    <arg name="ros2_control_config_package" default="diff_canopen_system" description="Path to ros2_control configuration." />
    <arg name="ros2_control_config_directory" default="config/fake_diff_drive_system" description="Path to ros2_control configuration." />
    <arg name="ros2_control_config_file" default="ros2_controllers" description="Path to ros2_control configuration." />
    <arg name="bus_config_package" default="diff_canopen_system" description="Path to bus configuration." />
    <arg name="bus_config_directory" default="config/fake_diff_drive_system" description="Path to bus configuration." />
    <arg name="bus_config_file" default="bus.yml" description="Path to bus configuration." />
    <arg name="master_config_package" default="diff_canopen_system" description="Path to master configuration file (*.dcf)" />
    <arg name="master_config_directory" default="config/fake_diff_drive_system" description="Path to master configuration file (*.dcf)" />
    <arg name="master_config_file" default="master.dcf" description="Path to master configuration file (*.dcf)" />
    <arg name="can_interface_name" default="vcan0" description="Interface name for can" />

    <!-- Robot description -->
    <let name="robot_description_content" value="$(command '$(find-exec xacro) $(find-pkg-share $(var description_package))/urdf/fake_diff_drive_system/$(var description_file).urdf.xacro name:=$(var name) prefix:=$(var prefix) bus_config:=$(find-pkg-share $(var bus_config_package))/$(var bus_config_directory)/$(var bus_config_file) master_config:=$(find-pkg-share $(var master_config_package))/$(var master_config_directory)/$(var master_config_file) can_interface_name:=$(var can_interface_name)')" />

    <node pkg="robot_state_publisher" exec="robot_state_publisher" output="both">
        <param name="robot_description" value="$(var robot_description_content)" />
    </node>

    <!-- Nodes -->
    <node pkg="controller_manager" exec="ros2_control_node" output="screen">
        <param from="$(find-pkg-share $(var ros2_control_config_package))/$(var ros2_control_config_directory)/$(var ros2_control_config_file).yaml"/>
    </node>

    <node pkg="controller_manager" exec="spawner" args="joint_state_broadcaster --controller-manager /controller_manager" />
    <node pkg="controller_manager" exec="spawner" args="diff_base_controller -c /controller_manager" />
    <node pkg="controller_manager" exec="spawner" args="left_wheel_controller -c /controller_manager" />
    <node pkg="controller_manager" exec="spawner" args="right_wheel_controller -c /controller_manager" />

    <!-- Slave nodes (commented out as in the Python file) -->
    <include file="$(find-pkg-share diff_canopen_system)/launch/fake_motor_controller.launch.py">
        <arg name="node_id" value="0x23" />
        <arg name="node_name" value="left_wheel" />
        <arg name="slave_config" value="$(find-pkg-share $(var master_config_package))/$(var master_config_directory)/fake_motor_controller.eds" />
    </include>

    <include file="$(find-pkg-share diff_canopen_system)/launch/fake_motor_controller.launch.py">
        <arg name="node_id" value="0x28" />
        <arg name="node_name" value="right_wheel" />
        <arg name="slave_config" value="$(find-pkg-share $(var master_config_package))/$(var master_config_directory)/fake_motor_controller.eds" />
    </include>
</launch>
